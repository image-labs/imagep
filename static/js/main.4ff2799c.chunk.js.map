{"version":3,"sources":["commons/reducers/current-user.js","store.js","commons/utils/env.js","commons/utils/github-auth.js","commons/utils/app.js","commons/utils/service-worker.js","components/sign-in-button/sign-in-button.js","components/user-menu/user-menu.js","components/navbar/navbar.js","components/home/home.js","components/starred-functions/starred-functions.js","components/your-functions/your-functions.js","components/sign-in/sign-in.js","components/app/app.js","index.js"],"names":["currentUserReducer","createReducer","set","state","payload","reset","load","func","actions","axios","get","then","user","data","name","login","avatarURL","avatar_url","profileURL","html_url","rootReducer","combineReducers","currentUser","store","createStore","isDev","process","authConf","Env","GITHUB_CONF","auth","dev","prod","LS_GITHUB_STATE_KEY","LS_ACCESS_TOKEN_KEY","generateSignInURL","localStorage","getItem","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","makeGithubState","setItem","url","URL","authorizeURL","searchParams","clientId","toString","setAccessToken","token","getAccessToken","setupApp","defaults","baseURL","apiDomain","headers","common","setupCurrentUser","Boolean","window","location","hostname","match","SignInButton","props","signinURL","href","this","target","rel","className","React","Component","UserMenu","signOutUser","userActions","alignRight","Toggle","variant","alt","src","height","width","Menu","Item","Divider","onClick","connect","dispatch","getActions","SIGN_IN_PATH","userControls","pathname","Home","Starred","Your","STATUS","IN_PROGRESS","Symbol","SUCCESS","FAILURE","SignIn","signInStatus","init","code","params","URLSearchParams","search","post","accessURL","access_token","catch","error","Promise","reject","setSignInStatus","open","close","setState","authStatus","aria-hidden","message","getMessage","App","path","handler","addEventListener","event","key","initApp","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ff2799c.chunk.js","sourcesContent":["import { createReducer, func } from 'xreducer';\nimport axios from 'axios';\n\nfunction loadUser(actions) {\n  return axios.get(\"user\")\n    .then(user => {\n      const data = user.data;\n      actions.set({\n        name: data.name,\n        login: data.login,\n        avatarURL: data.avatar_url,\n        profileURL: data.html_url,\n      });\n    });\n}\n\nconst currentUserReducer = createReducer({\n  set: (state, payload) => payload,\n  reset: () => null,\n\n  load: func(loadUser)\n});\n\nexport default currentUserReducer;","import { createStore, combineReducers } from 'redux';\n\nimport currentUser from './commons/reducers/current-user';\n\nconst rootReducer = combineReducers({\n  currentUser\n});\n\nconst store = createStore(rootReducer);\n\nexport default store;","\nfunction isDev() {\n  return !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n};\n\nexport default {\n  isDev\n};","import axios from 'axios';\n\nimport Env from './env';\n\nimport GITHUB_CONF from \"../../configs/github-conf\";\nlet authConf = Env.isDev() ? GITHUB_CONF.auth.dev : GITHUB_CONF.auth.prod;\n\nconst LS_GITHUB_STATE_KEY = \"imagep_github_state\";\nconst LS_ACCESS_TOKEN_KEY = \"imagep_access_token\";\n\nfunction makeGithubState(length) {\n  let result           = [];\n  let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n     result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n  }\n  return result.join(\"\");\n}\n\nfunction generateSignInURL() {\n  let state = localStorage.getItem(LS_GITHUB_STATE_KEY);\n\n  if(!state) {\n    state = makeGithubState(12);\n    localStorage.setItem(LS_GITHUB_STATE_KEY, state);\n  }\n\n  let url = new URL(authConf.authorizeURL);\n  url.searchParams.set(\"client_id\", authConf.clientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", \"gist\");\n\n  return url.toString();\n};\n\nfunction signIn(code, state) {\n  if(state === localStorage.getItem(LS_GITHUB_STATE_KEY)) {\n    return axios.post(authConf.accessURL, {\n      code,\n      state\n    }).then(auth => {\n      setAccessToken(auth.data.access_token);\n      return auth;\n    }).catch(error => {\n      setAccessToken();\n      throw error;\n    });\n  }\n\n  return Promise.reject();\n};\n\nfunction signOut() {\n  setAccessToken();\n}\n\nfunction setAccessToken(token) {\n  localStorage.setItem(LS_ACCESS_TOKEN_KEY, (typeof token === \"string\") ? token : \"\");\n}\n\nfunction getAccessToken() {\n  return localStorage.getItem(LS_ACCESS_TOKEN_KEY);\n}\n\nfunction addAccessTokenListener(handler) {\n  window.addEventListener(\"storage\", event => {\n    if(event.key === LS_ACCESS_TOKEN_KEY) {\n      handler(event);\n    }\n  });\n}\n\nexport {\n  generateSignInURL,\n\n  signIn,\n  signOut,\n\n  getAccessToken,\n  addAccessTokenListener\n};","import axios from 'axios';\n\nimport { getAccessToken, addAccessTokenListener } from './github-auth';\nimport currentUserReducer from '../reducers/current-user';\n\nimport GITHUB_CONF from \"../../configs/github-conf\";\n\nfunction setAxiosDefault() {\n  axios.defaults.baseURL = GITHUB_CONF.apiDomain;\n  axios.defaults.headers.common['Authorization'] = \"token \" + getAccessToken();\n}\n\nfunction setupCurrentUser(currentUser) {\n  if(getAccessToken()) {\n    currentUser.load();\n  } else {\n    currentUser.reset();\n  }\n}\n\nfunction setupApp(currentUser) {\n  setAxiosDefault();\n  setupCurrentUser(currentUser);\n}\n\nfunction initApp(store){\n  const currentUser = currentUserReducer.getActions(store.dispatch);\n\n  setupApp(currentUser);\n  addAccessTokenListener(() => setupApp(currentUser));\n}\n\nexport {\n  initApp\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport { generateSignInURL } from '../../commons/utils/github-auth';\n\nimport './sign-in-button.scss';\n\nclass SignInButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      signinURL: generateSignInURL()\n    };\n  }\n\n  render() {\n    return (\n      <a href={this.state.signinURL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"sign-in-button\">\n        <i className=\"fa fa-github\"></i> Sign in\n      </a>\n    );\n  }\n}\n\nexport default SignInButton;\n","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport { connect } from 'react-redux';\n\nimport { signOut } from '../../commons/utils/github-auth';\nimport currentUserReducer from '../../commons/reducers/current-user';\n\nimport './user-menu.scss';\n\nclass UserMenu extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    };\n\n    this.signOutUser = () => {\n      this.props.userActions.reset();\n      signOut();\n    };\n  }\n\n  render() {\n    let user = this.props.currentUser;\n    return (\n      <div className=\"user-menu\">\n        <Dropdown alignRight={true}>\n          <Dropdown.Toggle variant=\"link\">\n            <img alt=\"\" className=\"avatar\" src={user.avatarURL + \"s=40\"} height=\"20\" width=\"20\"></img>\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu>\n            <Dropdown.Item href=\"/your\">Your Functions</Dropdown.Item>\n            <Dropdown.Item href=\"/starred\">Starred Functions</Dropdown.Item>\n            <Dropdown.Divider/>\n            <Dropdown.Item onClick={this.signOutUser}>Sign Out</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({ userActions: currentUserReducer.getActions(dispatch) });\nexport default connect(null, mapDispatchToProps)(UserMenu);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport SignInButton from '../sign-in-button/sign-in-button';\nimport UserMenu from '../user-menu/user-menu';\n\nimport './navbar.scss';\n\nconst SIGN_IN_PATH = \"/signin\";\n\nfunction Navbar(props) {\n  let userControls;\n\n  if(props.currentUser) {\n    userControls = <UserMenu currentUser={props.currentUser}/>;\n  } else if(window.location.pathname !== SIGN_IN_PATH) {\n    userControls = <SignInButton/>;\n  }\n\n  return (\n    <div className=\"navbar\">\n      <span className=\"navbar__logo\">\n        <strong>ImageP</strong>\n        <span className=\"navbar__company-name\"> by ImageLabs</span>\n      </span>\n\n      {userControls}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({ currentUser: state.currentUser });\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\n\nimport './home.scss';\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <h1>Home</h1>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nimport './starred-functions.scss';\n\nfunction Starred() {\n  return (\n    <div className=\"starred\">\n      <h1>Starred</h1>\n    </div>\n  );\n}\n\nexport default Starred;\n","import React from 'react';\n\nimport './your-functions.scss';\n\nfunction Your() {\n  return (\n    <div className=\"your\">\n      <h1>Your</h1>\n    </div>\n  );\n}\n\nexport default Your;\n","import React from 'react';\n\nimport { signIn } from '../../commons/utils/github-auth';\n\nimport './sign-in.scss';\n\nconst STATUS = {\n  IN_PROGRESS:  Symbol(\"in-progress\"),\n  SUCCESS:  Symbol(\"success\"),\n  FAILURE:  Symbol(\"failure\"),\n};\n\nclass SignIn extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      signInStatus: STATUS.IN_PROGRESS\n    };\n    this.init(props);\n  }\n\n  init(props) {\n    let params = (new URLSearchParams(props.location.search));\n    signIn(params.get(\"code\"), params.get(\"state\"))\n    .then(auth => {\n      this.setSignInStatus(STATUS.SUCCESS);\n      window.open('','_self').close();\n    })\n    .catch(() => {\n      this.setSignInStatus(STATUS.FAILURE);\n    });\n  }\n\n  setSignInStatus(state) {\n    this.setState({\n      signInStatus: state\n    });\n  }\n\n  getMessage(authStatus) {\n    switch(authStatus) {\n      case STATUS.IN_PROGRESS:\n        return (\n          <div className=\"alert alert-info\">\n            <strong>ImageP</strong>\n            <i className=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i>\n            Signing into GitHub...\n          </div>\n        );\n\n      case STATUS.SUCCESS:\n        return (\n          <div className=\"alert alert-success\">\n            <strong>ImageP</strong>\n            <i className=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i>\n            Signed into GitHub successfully!\n          </div>\n        );\n\n      case STATUS.FAILURE:\n        return (\n          <div className=\"alert alert-danger\">\n            <strong>ImageP</strong>\n            <i className=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>\n            Signing into GitHub failed!\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"alert alert-info\">\n            <strong>ImageP</strong>\n            <i className=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>\n            Not signed into GitHub!\n          </div>\n        );\n    }\n  }\n\n  render() {\n    const message = this.getMessage(this.state.signInStatus);\n    return (\n      <div className=\"sign-in\">\n        {message}\n      </div>\n    );\n  }\n\n}\n\nexport default SignIn;\n","import React from 'react';\nimport { Router } from \"@reach/router\"\n\nimport Navbar from '../navbar/navbar';\nimport Home from '../home/home';\nimport Starred from '../starred-functions/starred-functions';\nimport Your from '../your-functions/your-functions';\nimport SignIn from '../sign-in/sign-in';\n\nimport './app.scss';\n\nfunction App() {\n  return (\n      <div className=\"app\">\n        <Navbar />\n        <Router>\n\n          <Home path=\"/\"/>\n          <Starred path=\"starred\"/>\n          <Your path=\"your\"/>\n\n          <SignIn path=\"signin\"/>\n\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport store from './store'\nimport { initApp } from './commons/utils/app'\nimport * as serviceWorker from './commons/utils/service-worker';\n\nimport App from './components/app/app';\n\nimport './index.scss';\n\ninitApp(store);\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}