{"version":3,"sources":["commons/utils/env.js","hooks/github-auth.js","components/user/user.js","components/navbar/navbar.js","components/app/app.js","commons/utils/service-worker.js","index.js"],"names":["isDev","process","LS_USER_KEY","authContext","createContext","authConf","Env","AUTH_CONF","dev","prod","ProvideAuth","children","auth","useState","user","setUser","signout","localStorage","removeItem","useProvideAuth","Provider","value","useAuth","useContext","generateSigninURL","state","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","makeGithubState","setItem","authorizeURL","clientId","User","className","createUserDetails","signinURL","href","title","target","rel","creteSigninButton","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yoBAKe,OACbA,MALF,WACE,OAAgCC,I,OCK5BC,EAAc,cAEdC,EAAcC,0BAEhBC,EAAWC,EAAIN,QAAUO,EAAUC,IAAMD,EAAUE,KAEhD,SAASC,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACtBC,EAeR,WAA2B,IAAD,EACAC,mBAAS,MADT,mBACjBC,EADiB,KACXC,EADW,KAcxB,MAAO,CACLD,OACAE,QAPc,WACdD,EAAQ,MACRE,aAAaC,WAAWhB,KA1BbiB,GACb,OAAO,kBAAChB,EAAYiB,SAAb,CAAsBC,MAAOT,GAAOD,GAGtC,IAAMW,EAAU,WACrB,OAAOC,qBAAWpB,IAGPqB,EAAoB,WAC/B,IAAMC,EA0BR,SAAyBC,GAIvB,IAHA,IAAIC,EAAmB,GACnBC,EAAmB,iEACnBC,EAAmBD,EAAWF,OACzBI,EAAI,EAAGA,EAAIJ,EAAQI,IACzBH,EAAOI,KAAKH,EAAWI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,KAE5D,OAAOF,EAAOS,KAAK,IAjCLC,CAAgB,IAE9B,OADApB,aAAaqB,QAlBa,sBAkBgBb,GACpC,GAAN,OAAUpB,EAASkC,aAAnB,sBAA6ClC,EAASmC,SAAtD,kBAAwEf,EAAxE,gB,MCGagB,MAVf,WACE,IAAI7B,EAAOU,IAEX,OACE,yBAAKoB,UAAU,QACZ9B,EAAKE,UAAO6B,EAlBnB,SAA2B/B,GACzB,IAAIgC,EAAYpB,IAChB,OACE,uBAAGqB,KAAMD,EAAWF,UAAU,eAAeI,MAAM,sBAAsBC,OAAO,SAASC,IAAI,uBAC3F,uBAAGN,UAAU,iBADf,YAeyCO,K,MCL9BC,MAbf,WACE,OACE,yBAAKR,UAAU,UACb,0BAAMA,UAAU,gBACd,0CACA,0BAAMA,UAAU,wBAAhB,kBAGF,kBAAC,EAAD,Q,MCGSS,MAVf,WACE,OACE,kBAACzC,EAAD,KACE,yBAAKgC,UAAU,OACb,kBAAC,EAAD,SCEYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.70692ba0.chunk.js","sourcesContent":["\nfunction isDev() {\n  return !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n};\n\nexport default {\n  isDev\n};","// Based on https://usehooks.com/useAuth/\n\nimport React, { useState, useContext, createContext } from \"react\";\nimport Env from '../commons/utils/env';\nimport AUTH_CONF from \"../configs/auth-conf\";\n\nconst LS_GITHUB_STATE_KEY = \"imagep_github_state\";\nconst LS_USER_KEY = \"imagep_user\";\n\nconst authContext = createContext();\n\nlet authConf = Env.isDev() ? AUTH_CONF.dev : AUTH_CONF.prod;\n\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nexport const generateSigninURL = () => {\n  const state = makeGithubState(12);\n  localStorage.setItem(LS_GITHUB_STATE_KEY, state);\n  return `${authConf.authorizeURL}?client_id=${authConf.clientId}&state=${state}&scope=gist`;\n};\n\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  //let accessToken = localStorage.getItem(ACCESS_TOKEN_KEY);\n\n  // const signin = () => {\n  //   setUser({});\n  // };\n\n  const signout = () => {\n    setUser(null);\n    localStorage.removeItem(LS_USER_KEY);\n  };\n\n  return {\n    user,\n    signout\n  };\n}\n\nfunction makeGithubState(length) {\n  let result           = [];\n  let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n     result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n  }\n  return result.join(\"\");\n}","import React from 'react';\nimport { useAuth, generateSigninURL } from \"../../hooks/github-auth\";\n\nimport './user.scss';\n\nfunction creteSigninButton(auth) {\n  let signinURL = generateSigninURL();\n  return (\n    <a href={signinURL} className=\"user__signin\" title=\"Sign in with GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <i className=\"fa fa-github\"></i> Sign in\n    </a>\n  );\n}\n\nfunction createUserDetails(auth) {\n\n}\n\nfunction User() {\n  let auth = useAuth();\n\n  return (\n    <div className=\"user\">\n      {auth.user ? createUserDetails(auth) : creteSigninButton(auth)}\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport User from \"../user/user\";\n\nimport './navbar.scss';\n\nfunction Navbar() {\n  return (\n    <div className=\"navbar\">\n      <span className=\"navbar__logo\">\n        <strong>ImageP</strong>\n        <span className=\"navbar__company-name\"> by ImageLabs</span>\n      </span>\n\n      <User/>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport Navbar from '../navbar/navbar';\nimport { ProvideAuth } from \"../../hooks/github-auth\";\n\nimport './app.scss';\n\nfunction App() {\n  return (\n    <ProvideAuth>\n      <div className=\"app\">\n        <Navbar />\n      </div>\n    </ProvideAuth>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport * as serviceWorker from './commons/utils/service-worker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}