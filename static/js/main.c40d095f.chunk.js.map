{"version":3,"sources":["commons/utils/auth0.js","components/profile/profile.js","components/navbar/navbar.js","commons/utils/env.js","components/app/app.js","commons/utils/service-worker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Profile","loading","user","logout","src","picture","alt","onClick","returnTo","origin","Navbar","isAuthenticated","loginWithRedirect","className","isDevelopment","process","App","toString","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","connection","redirect_uri","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c40d095f.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from \"react\";\nimport { useAuth0 } from \"../../commons/utils/auth0\";\n\nconst Profile = () => {\n  const { loading, user, logout } = useAuth0();\n\n  if (loading || !user) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return ( // TODO: Move returnTo into auth0.js\n    <img src={user.picture+\"&s=40\"} alt=\"Profile\" onClick={() => logout({\n      returnTo: window.location.origin\n    })}/>\n  );\n};\n\nexport default Profile;","import React from 'react';\nimport './navbar.scss';\nimport { useAuth0 } from \"../../commons/utils/auth0\";\nimport Profile from \"../profile/profile\";\n\nfunction Navbar() {\n  const { isAuthenticated, loginWithRedirect } = useAuth0();\n\n  return (\n    <div className=\"navbar\">\n      <span className=\"navbar__logo\">\n        <strong>ImageP</strong>\n        <span className=\"navbar__company-name\"> by ImageLabs</span>\n      </span>\n\n      {!isAuthenticated && (\n        <button onClick={() => loginWithRedirect({})} className=\"navbar__signin\">\n          <i className=\"fa fa-github\"></i> Sign in\n        </button>\n      )}\n      {isAuthenticated && (\n        <Profile/>\n      )}\n    </div>\n  );\n}\n\nexport default Navbar;\n","export const isDevelopment = () => {\n  return !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n};","import React from 'react';\nimport Navbar from '../navbar/navbar';\nimport { useAuth0 } from \"../../commons/utils/auth0\";\nimport {isDevelopment} from '../../commons/utils/env';\n\nimport './app.scss';\n\nfunction App() {\n  const { loading } = useAuth0();\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <header>\n        <Navbar />\n      </header>\n      <footer>\n        Is dev env: {isDevelopment().toString()}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport * as serviceWorker from './commons/utils/service-worker';\nimport { Auth0Provider } from \"./commons/utils/auth0\";\nimport config from './configs/auth0.json';\n\nimport './index.scss';\n\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\n// Todo: Move the configuration and call back to auth0.js\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    connection={\"github\"}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}